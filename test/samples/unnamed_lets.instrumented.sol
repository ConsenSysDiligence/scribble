/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity 0.6.10;

contract Foo {
    struct vars0 {
        uint256 dummy_;
        uint256 x;
        bool let_0;
    }

    function snd(uint v) internal pure returns (uint, uint) {
        return (1, v);
    }

    function foo(uint v) public {
        vars0 memory _v;
        _original_Foo_foo(v);
        (_v.dummy_, _v.x) = snd(v);
        _v.let_0 = _v.x == 2;
        if (!(_v.let_0)) {
            emit __ScribbleUtilsLib__24.AssertionFailed("00537:065:00 0: P0");
            assert(false);
        }
    }

    function _original_Foo_foo(uint v) private {}
}

library __ScribbleUtilsLib__24 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }

    function isInContract() internal returns (bool res) {
        assembly {
            res := sload(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c)
        }
    }

    function setInContract(bool v) internal {
        assembly {
            sstore(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c, v)
        }
    }
}
