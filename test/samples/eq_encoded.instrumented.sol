/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity 0.8.20;

contract Sample {
    enum Other {
        A,
        B
    }

    struct Some {
        uint a;
    }

    uint256[3] internal a = [1, 2, 3];
    uint256[3] internal b = [1, 2, 3];
    uint256[3] internal c = a;
    uint256[] internal d = [4, 5, 6];
    uint256[] internal e = [4, 5, 6];
    uint256[] internal f = a;
    Some internal s = Some(1);

    function positive() public returns (bool RET_0) {
        RET_0 = _original_Sample_positive();
        unchecked {
            if (!(__ScribbleUtilsLib__72.eq_encoded("abc", hex"616263"))) {
                emit __ScribbleUtilsLib__72.AssertionFailed("000709:0066:000 0: ");
                assert(false);
            }
            if (!(__ScribbleUtilsLib__72.eq_encoded(abi.encode(bytes2(0xffcc)), abi.encode(bytes2(0xffcc))))) {
                emit __ScribbleUtilsLib__72.AssertionFailed("000950:0066:000 1: ");
                assert(false);
            }
            if (!(__ScribbleUtilsLib__72.eq_encoded(abi.encode(0xC0FfEec0ffeeC0FfEec0fFEec0FfeEc0fFEe0000), abi.encode(0xC0FfEec0ffeeC0FfEec0fFEec0FfeEc0fFEe0000)))) {
                emit __ScribbleUtilsLib__72.AssertionFailed("001247:0066:000 2: ");
                assert(false);
            }
            if (!(__ScribbleUtilsLib__72.eq_encoded(abi.encode(uint256(512)), abi.encode(uint16(512))))) {
                emit __ScribbleUtilsLib__72.AssertionFailed("001483:0066:000 3: ");
                assert(false);
            }
            if (!(__ScribbleUtilsLib__72.eq_encoded(abi.encode(int256(-512)), abi.encode(int256(-512))))) {
                emit __ScribbleUtilsLib__72.AssertionFailed("001720:0066:000 4: ");
                assert(false);
            }
            if (!(__ScribbleUtilsLib__72.eq_encoded(abi.encode(true), abi.encode(true)))) {
                emit __ScribbleUtilsLib__72.AssertionFailed("001941:0066:000 5: ");
                assert(false);
            }
            if (!(__ScribbleUtilsLib__72.eq_encoded(abi.encode(false), abi.encode(false)))) {
                emit __ScribbleUtilsLib__72.AssertionFailed("002164:0066:000 6: ");
                assert(false);
            }
            if (!(__ScribbleUtilsLib__72.eq_encoded(abi.encode(Some(1)), abi.encode(s)))) {
                emit __ScribbleUtilsLib__72.AssertionFailed("002385:0066:000 7: ");
                assert(false);
            }
            if (!(__ScribbleUtilsLib__72.eq_encoded(abi.encode(Other.A), abi.encode(Other.A)))) {
                emit __ScribbleUtilsLib__72.AssertionFailed("002612:0066:000 8: ");
                assert(false);
            }
            if (!(__ScribbleUtilsLib__72.eq_encoded(abi.encode(a), abi.encode(b)))) {
                emit __ScribbleUtilsLib__72.AssertionFailed("002827:0066:000 9: ");
                assert(false);
            }
            if (!(__ScribbleUtilsLib__72.eq_encoded(abi.encode(d), abi.encode(e)))) {
                emit __ScribbleUtilsLib__72.AssertionFailed("003042:0067:000 10: ");
                assert(false);
            }
        }
    }

    function _original_Sample_positive() private returns (bool) {
        return true;
    }

    function negative() public returns (bool RET_0) {
        RET_0 = _original_Sample_negative();
        unchecked {
            if (!(!__ScribbleUtilsLib__72.eq_encoded("abc", "abcd"))) {
                emit __ScribbleUtilsLib__72.AssertionFailed("003474:0067:000 11: ");
                assert(false);
            }
            if (!(!__ScribbleUtilsLib__72.eq_encoded("abc", "def"))) {
                emit __ScribbleUtilsLib__72.AssertionFailed("003675:0067:000 12: ");
                assert(false);
            }
            if (!(!__ScribbleUtilsLib__72.eq_encoded(hex"616263", hex"616264"))) {
                emit __ScribbleUtilsLib__72.AssertionFailed("003888:0067:000 13: ");
                assert(false);
            }
            if (!(!__ScribbleUtilsLib__72.eq_encoded(abi.encode(bytes2(0xffcc)), abi.encode(bytes2(0xffff))))) {
                emit __ScribbleUtilsLib__72.AssertionFailed("004131:0067:000 14: ");
                assert(false);
            }
            if (!(!__ScribbleUtilsLib__72.eq_encoded(abi.encode(0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF), abi.encode(0xC0FfEec0ffeeC0FfEec0fFEec0FfeEc0fFEe0000)))) {
                emit __ScribbleUtilsLib__72.AssertionFailed("004430:0067:000 15: ");
                assert(false);
            }
            if (!(!__ScribbleUtilsLib__72.eq_encoded(abi.encode(uint256(512)), abi.encode(uint16(1024))))) {
                emit __ScribbleUtilsLib__72.AssertionFailed("004669:0067:000 16: ");
                assert(false);
            }
            if (!(!__ScribbleUtilsLib__72.eq_encoded(abi.encode(int256(-512)), abi.encode(int256(-1024))))) {
                emit __ScribbleUtilsLib__72.AssertionFailed("004909:0067:000 17: ");
                assert(false);
            }
            if (!(!__ScribbleUtilsLib__72.eq_encoded(abi.encode(true), abi.encode(false)))) {
                emit __ScribbleUtilsLib__72.AssertionFailed("005133:0067:000 18: ");
                assert(false);
            }
            if (!(!__ScribbleUtilsLib__72.eq_encoded(abi.encode(Some(2)), abi.encode(s)))) {
                emit __ScribbleUtilsLib__72.AssertionFailed("005356:0067:000 19: ");
                assert(false);
            }
            if (!(!__ScribbleUtilsLib__72.eq_encoded(abi.encode(Other.A), abi.encode(Other.B)))) {
                emit __ScribbleUtilsLib__72.AssertionFailed("005585:0067:000 20: ");
                assert(false);
            }
            if (!(!__ScribbleUtilsLib__72.eq_encoded(abi.encode(a), abi.encode(d)))) {
                emit __ScribbleUtilsLib__72.AssertionFailed("005802:0067:000 21: ");
                assert(false);
            }
            if (!(!__ScribbleUtilsLib__72.eq_encoded(abi.encode(c), abi.encode(f)))) {
                emit __ScribbleUtilsLib__72.AssertionFailed("006019:0067:000 22: ");
                assert(false);
            }
        }
    }

    function _original_Sample_negative() private returns (bool) {
        return true;
    }
}

library __ScribbleUtilsLib__72 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }

    function isInContract() internal returns (bool res) {
        assembly {
            res := sload(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c)
        }
    }

    function setInContract(bool v) internal {
        assembly {
            sstore(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c, v)
        }
    }

    function eq_encoded(bytes memory a, bytes memory b) internal pure returns (bool) {
        if (a.length != b.length) return false;
        return keccak256(a) == keccak256(b);
    }
}
