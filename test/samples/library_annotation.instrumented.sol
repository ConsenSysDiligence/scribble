/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity 0.8.16;

library Foo {
    event AssertionFailed(string message);

    function foo() internal returns (uint RET_0) {
        RET_0 = _original_Foo_foo();
        unchecked {
            if (!(RET_0 == 1)) {
                emit AssertionFailed("0: ");
                assert(false);
            }
        }
    }

    function _original_Foo_foo() private returns (uint) {
        return 1;
    }
}

contract Boo {
    function main() public {
        Foo.foo();
    }
}

/// Utility contract holding a stack counter
contract __scribble_ReentrancyUtils {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    bool __scribble_out_of_contract = true;
}
