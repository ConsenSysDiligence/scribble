/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity 0.4.26;

/// Utility contract holding a stack counter
contract __scribble_ReentrancyUtils {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    bool __scribble_out_of_contract = true;
}

library address_to_uint256 {
    struct S {
        mapping(address => uint256) innerM;
        address[] keys;
        mapping(address => uint256) keyIdxM;
        uint256 sum;
    }

    function addKey(S storage m, address key) private {
        uint idx = m.keyIdxM[key];
        if (idx == 0) {
            if (m.keys.length == 0) {
                m.keys.length++;
            }
            m.keyIdxM[key] = m.keys.length;
            m.keys.push(key);
        }
    }

    function removeKey(S storage m, address key) private {
        uint256 idx = m.keyIdxM[key];
        if (idx == 0) return;
        if (idx != (m.keys.length - 1)) {
            address lastKey = m.keys[m.keys.length - 1];
            m.keys[idx] = lastKey;
            m.keyIdxM[lastKey] = idx;
        }
        delete m.keys[m.keys.length - 1];
        m.keys.length--;
        delete m.keyIdxM[key];
    }

    function get(S storage m, address key) internal view returns (uint256) {
        return m.innerM[key];
    }
}

contract Foo is __scribble_ReentrancyUtils {
    struct vars0 {
        uint256 i0;
        address a0;
        bool forall_0;
    }

    address_to_uint256.S private _valueMap;

    function foo() public {
        vars0 memory _v;
        _original_Foo_foo();
        _v.forall_0 = true;
        for (_v.i0 = 1; _v.i0 < _valueMap.keys.length; _v.i0++) {
            _v.a0 = _valueMap.keys[_v.i0];
            _v.forall_0 = address_to_uint256.get(_valueMap, _v.a0) > 0;
            if (!_v.forall_0) break;
        }
        if (!(_v.forall_0)) {
            emit AssertionFailed("0: ");
            assert(false);
        }
    }

    function _original_Foo_foo() private {}
}
