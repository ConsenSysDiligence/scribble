/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity 0.8.8;

enum A { A, B, C }

type Price is uint32;

contract UserDefinedValueTypes {
    type Quantity is uint32;

    function orderPrice(Price p, Quantity q) public returns (Price RET_0) {
        RET_0 = _original_UserDefinedValueTypes_orderPrice(p, q);
        unchecked {
            if (!((Price.unwrap(p) * Quantity.unwrap(q)) == Price.unwrap(RET_0))) {
                __ScribbleUtilsLib__38.assertionFailed("0: ");
                assert(false);
            }
        }
    }

    function _original_UserDefinedValueTypes_orderPrice(Price p, Quantity q) private returns (Price) {
        return Price.wrap(Price.unwrap(p) * Quantity.unwrap(q));
    }
}

library __ScribbleUtilsLib__38 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }
}

/// Utility contract holding a stack counter
contract __scribble_ReentrancyUtils {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    bool __scribble_out_of_contract = true;
}
