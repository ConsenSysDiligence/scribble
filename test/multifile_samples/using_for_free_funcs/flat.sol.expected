/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity 0.8.13;

type X is uint256;

using { add_1 } for X global;

function add(X a, X b) pure returns (uint256) {
    return 1;
}

function add_1(X a, X b) pure returns (X) {
    return X.wrap(X.unwrap(a) + X.unwrap(b));
}

/// Utility contract holding a stack counter
contract __scribble_ReentrancyUtils {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    bool __scribble_out_of_contract = true;
}

contract Test is __scribble_ReentrancyUtils {
    function main() public returns (X RET_0) {
        RET_0 = _original_Test_main();
        unchecked {
            if (!(true)) {
                emit AssertionFailed("0: ");
                assert(false);
            }
        }
    }

    function _original_Test_main() private returns (X) {
        X a = X.wrap(1);
        X b = X.wrap(2);
        return a.add_1(b);
    }
}