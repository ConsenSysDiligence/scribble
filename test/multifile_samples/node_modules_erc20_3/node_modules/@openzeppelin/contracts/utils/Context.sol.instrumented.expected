/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/__scribble_ReentrancyUtils.sol";

///  @dev Provides information about the current execution context, including the
///  sender of the transaction and its data. While these are generally available
///  via msg.sender and msg.data, they should not be accessed in such a direct
///  manner, since when dealing with meta-transactions the account sending and
///  paying for execution may not be the actual sender (as far as an application
///  is concerned).
///  This contract is only required for intermediate, library-like contracts.
abstract contract Context is __scribble_ReentrancyUtils {
    function _msgSender() virtual internal view returns (address) {
        return msg.sender;
    }

    function _msgData() virtual internal view returns (bytes calldata) {
        return msg.data;
    }

    /// Check only the current contract's state invariants
    function __scribble_Context_check_state_invariants_internal() internal {}

    /// Check the state invariant for the current contract and all its bases
    function __scribble_check_state_invariants() virtual internal {
        __scribble_Context_check_state_invariants_internal();
    }

    constructor() {
        __scribble_out_of_contract = false;
        __scribble_check_state_invariants();
        __scribble_out_of_contract = true;
    }
}