/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
import "./erc20_base.sol";
import "./__scribble_ReentrancyUtils.sol";

///  #macro erc20(balances, allowances, _totalSupply);
contract Token is __scribble_ReentrancyUtils, ERC20 {
    struct vars1 {
        uint256 old_0;
        bool __scribble_check_invs_at_end;
    }

    struct vars2 {
        bool __scribble_check_invs_at_end;
    }

    constructor() public ERC20(100000) {
        vars1 memory _v;
        _v.__scribble_check_invs_at_end = __scribble_out_of_contract;
        __scribble_out_of_contract = false;
        _v.old_0 = balances.sum;
        _original_Token_constructor();
        if (!((balances.sum == _v.old_0) || (msg.sig == bytes4(0x0)))) {
            emit AssertionFailed("2: The token has a fixed supply.");
            assert(false);
        }
        if (_v.__scribble_check_invs_at_end) __scribble_check_state_invariants();
        __scribble_out_of_contract = _v.__scribble_check_invs_at_end;
    }

    function _original_Token_constructor() private {
        __scribble_out_of_contract = false;
        __scribble_check_state_invariants();
        __scribble_out_of_contract = true;
    }

    function allowance(address owner, address delegate) override public returns (uint RET_0) {
        vars2 memory _v;
        _v.__scribble_check_invs_at_end = __scribble_out_of_contract;
        __scribble_out_of_contract = false;
        RET_0 = _original_Token_allowance(owner, delegate);
        if (!(RET_0 == allowances[owner][delegate])) {
            emit AssertionFailed("5: Returns spenders allowance for this owner");
            assert(false);
        }
        if (_v.__scribble_check_invs_at_end) __scribble_check_state_invariants();
        __scribble_out_of_contract = _v.__scribble_check_invs_at_end;
    }

    function _original_Token_allowance(address owner, address delegate) private returns (uint) {
        return ERC20.allowance(owner, delegate);
    }

    /// Check only the current contract's state invariants
    function __scribble_Token_check_state_invariants_internal() internal {
        if (!(balances.sum == _totalSupply)) {
            emit AssertionFailed("1: The sum of balances is always equal to the total supply");
            assert(false);
        }
    }

    /// Check the state invariant for the current contract and all its bases
    function __scribble_check_state_invariants() virtual override internal {
        __scribble_Token_check_state_invariants_internal();
        __scribble_ERC20_check_state_invariants_internal();
    }
}